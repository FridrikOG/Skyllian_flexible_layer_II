{"ast":null,"code":"import { useHistory } from \"react-router\";\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\nimport config from \"../config\";\nimport { USER_LOGIN_ACTION } from \"../redux/actions/userActions\";\n\nconst userService = () => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const register = (username, displayName, userPassword) => async (dispatch, getState) => {\n    const data = {\n      username: username,\n      displayName: displayName,\n      password: userPassword\n    };\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        displayName: displayName,\n        password: userPassword\n      })\n    };\n    const res = await fetch(\"http://localhost:4567/register\", requestOptions);\n\n    if (!res.ok) {\n      return false;\n    }\n\n    return res;\n  }; // `${config.externals.config.apiURL}/register`\n\n\n  const saveToLocalStorage = response => {\n    const {\n      tokens\n    } = response.data;\n    const accessToken = tokens.access;\n    const user = response.data;\n    localStorage.setItem(\"tokens\", JSON.stringify(tokens));\n    localStorage.setItem(\"user\", JSON.stringify(user)); // authService.setAuthorizationToken(accessToken);\n  };\n\n  const login = (username, userPassword) => async (dispatch, getState) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        username: username,\n        password: userPassword\n      }),\n      credentials: \"include\"\n    };\n    const res = await fetch(\"http://localhost:4567/login/password\", requestOptions);\n\n    if (!res.ok) {\n      return {};\n    }\n\n    const resJson = res.json();\n    dispatch(USER_LOGIN_ACTION(resJson));\n    return resJson;\n  };\n\n  const getUser = () => async (dispatch, getState) => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      credentials: \"include\"\n    };\n    const res = await fetch(\"http://localhost:4567/user/info\", requestOptions);\n\n    if (!res.ok) {\n      return {};\n    }\n  };\n\n  const logout = () => async (dispatch, getState) => {\n    console.log(\"Inside logout \");\n    const requestOptions = {\n      method: \"POST\",\n      credentials: \"include\"\n    };\n    const res = await fetch(\"http://localhost:4567/logout\", requestOptions);\n    console.log(\"The in logout service  \", res);\n\n    if (!res.ok) {\n      return {};\n    }\n\n    return true;\n  };\n\n  return {\n    register,\n    login,\n    getUser,\n    logout\n  };\n};\n\nexport default userService;","map":{"version":3,"sources":["/Users/fridrikorngunnarsson/Documents/GitHub/save_game/save_game/lightweight_blockchain-main/blockchain_webinterface/annall_ui/src/services/userService.js"],"names":["useHistory","axios","useDispatch","config","USER_LOGIN_ACTION","userService","register","username","displayName","userPassword","dispatch","getState","data","password","requestOptions","method","headers","body","JSON","stringify","res","fetch","ok","saveToLocalStorage","response","tokens","accessToken","access","user","localStorage","setItem","login","credentials","resJson","json","getUser","logout","console","log"],"mappings":"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","sourcesContent":["import { useHistory } from \"react-router\";\n\nimport axios from \"axios\";\nimport { useDispatch } from \"react-redux\";\n\nimport config from \"../config\";\n\nimport { USER_LOGIN_ACTION } from \"../redux/actions/userActions\";\n\nconst userService = () => {\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n\n  const register =\n    (username, displayName, userPassword) => async (dispatch, getState) => {\n      const data = {\n        username: username,\n        displayName: displayName,\n        password: userPassword,\n      };\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          username: username,\n          displayName: displayName,\n          password: userPassword,\n        }),\n      };\n      const res = await fetch(\"http://localhost:4567/register\", requestOptions);\n      if (!res.ok) {\n        return false;\n      }\n      return res;\n    };\n  // `${config.externals.config.apiURL}/register`\n  const saveToLocalStorage = (response) => {\n    const { tokens } = response.data;\n    const accessToken = tokens.access;\n    const user = response.data;\n\n    localStorage.setItem(\"tokens\", JSON.stringify(tokens));\n    localStorage.setItem(\"user\", JSON.stringify(user));\n    // authService.setAuthorizationToken(accessToken);\n  };\n\n  const login = (username, userPassword) => async (dispatch, getState) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({\n        username: username,\n        password: userPassword,\n      }),\n      credentials: \"include\",\n    };\n    const res = await fetch(\n      \"http://localhost:4567/login/password\",\n      requestOptions\n    );\n    if (!res.ok) {\n      return {};\n    }\n    const resJson = res.json();\n    dispatch(USER_LOGIN_ACTION(resJson));\n\n    return resJson;\n  };\n\n  const getUser = () => async (dispatch, getState) => {\n    const requestOptions = {\n      method: \"GET\",\n      headers: { \"Content-Type\": \"application/json\" },\n      credentials: \"include\",\n    };\n    const res = await fetch(\"http://localhost:4567/user/info\", requestOptions);\n    if (!res.ok) {\n      return {};\n    }\n  };\n\n  const logout = () => async (dispatch, getState) => {\n    console.log(\"Inside logout \");\n    const requestOptions = {\n      method: \"POST\",\n      credentials: \"include\",\n    };\n    const res = await fetch(\"http://localhost:4567/logout\", requestOptions);\n    console.log(\"The in logout service  \", res);\n    if (!res.ok) {\n      return {};\n    }\n\n    return true;\n  };\n\n  return {\n    register,\n    login,\n    getUser,\n    logout,\n  };\n};\n\nexport default userService;\n"]},"metadata":{},"sourceType":"module"}