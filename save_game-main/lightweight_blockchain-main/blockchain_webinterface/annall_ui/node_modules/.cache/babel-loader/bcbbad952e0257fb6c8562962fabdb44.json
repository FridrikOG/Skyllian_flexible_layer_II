{"ast":null,"code":"var _jsxFileName = \"/Users/heidifjeldelima/Documents/GitHub/save_game/lightweight_blockchain-main/blockchain_webinterface/annall_ui/src/components/NodeSystem/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst NodeSystem = () => {\n  _s();\n\n  const dispatch = useDispatch();\n  const navigate = useNavigate;\n  const [title, settitle] = useState(\"\");\n  const [description, setdescription] = useState(\"\");\n  const [imageURL, setimageURL] = useState(\"\");\n  const [answer1, setAnswer1] = useState(\"\");\n  const [answer2, setAnswer2] = useState(\"\");\n  const [answer3, setAnswer3] = useState(\"\");\n  const [answer4, setAnswer4] = useState(\"\");\n  const [answer1Correct, setAnswer1Correct] = useState(false);\n  const [answer2Correct, setAnswer2Correct] = useState(false);\n  const [answer3Correct, setAnswer3Correct] = useState(false);\n  const [answer4Correct, setAnswer4Correct] = useState(false);\n  const [errors, setErrors] = useState({\n    title: \"\",\n    description: \"\",\n    imageURL: \"\"\n  });\n  const [correctAnswer, setCorrectAnswer] = useState(\"answer_1\");\n  const [userIsAuth, setUserIsAuth] = useState(false);\n  const [userInfo, setUserInfo] = useState(\"\");\n  const altImage = \"https://static.thenounproject.com/png/396915-200.png\";\n\n  const getDict = () => {\n    return {\n      previous_hash: \"4d3e9b1e-816f-473b-8bd2-dd642681f07d\",\n      writer_signature: \"0a442720-2707-4e3e-b5cc-9c65b806bd1c\",\n      writer_id: \"0a442720-2707-4e3e-b5cc-9c65b806bd1c\",\n      coordinator_id: 3,\n      winner_number: 2,\n      payload: {\n        id: 43,\n        name: title,\n        description: description,\n        type: \"NFT\",\n        data: {\n          imageURL: imageURL\n        }\n      }\n    };\n  };\n\n  const handleChange = e => {\n    setCorrectAnswer(e.target.value);\n  };\n\n  const validate = () => {\n    let isValid = true;\n    const le = {\n      title: \"\",\n      description: \"\",\n      imageURL: \"\"\n    };\n\n    if (title.length <= 0) {\n      le[\"title\"] = \" can't be empty\";\n      isValid = false;\n    }\n\n    if (description.length < 6) {\n      le[\"description\"] = \" should be at least 6 in length\";\n      isValid = false;\n    }\n\n    if (imageURL.length < 5) {\n      le[\"imageURL\"] = \" should be at least 5 in length\";\n      isValid = false;\n    }\n\n    setErrors(le);\n    return isValid;\n  };\n\n  useEffect(() => {\n    const form = JSON.parse(localStorage.getItem(\"form\"));\n  }, []);\n\n  const handleOnSubmit = async e => {// Send to server\n    // e.preventDefault();\n    // console.log(\"Value \", correctAnswer);\n    // // If error then we don't dispatch\n    // //   if (!validate(title, question, url)) return;\n    // let correct1 = false;\n    // let correct2 = false;\n    // let correct3 = false;\n    // let correct4 = false;\n    // if (correctAnswer == \"answer_1\") {\n    //   correct1 = true;\n    // } else if (correctAnswer == \"answer_2\") {\n    //   correct2 = true;\n    // } else if (correctAnswer == \"answer_3\") {\n    //   correct3 = true;\n    // } else {\n    //   correct4 = true;\n    // }\n    // const user = JSON.parse(localStorage.getItem(\"user\"));\n    // console.log(\"The user \", user, \"id \", user.id);\n    // console.log(\"The user right here on submit \", user);\n    // let theQuestions = [\n    //   {\n    //     title: \"The biggest earwax in the world is?\",\n    //     options: [\n    //       {\n    //         value: \"your aunt's pants\",\n    //         correct: true,\n    //       },\n    //       {\n    //         value: \"Your grandma\",\n    //         correct: false,\n    //       },\n    //     ],\n    //   },\n    // ];\n    // let requestOptions = {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   credentials: \"include\",\n    //   body: JSON.stringify({\n    //     title: title,\n    //     titleImage: url,\n    //     questions: theQuestions,\n    //     owner: user,\n    //   }),\n    // };\n    // let res = await fetch(\"http://localhost:4567/matches\", requestOptions);\n    // console.log(\"Res \", res);\n    // let getRequest = {\n    //   method: \"GET\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n    // let userRes = await fetch(\"http://localhost:4567/user/info\", getRequest);\n    // console.log(\"user res \", userRes);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Create NFT!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 133,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NodeSystem, \"9fb7LC8D+UKs6mkPUdjq1uTRCVA=\", false, function () {\n  return [useDispatch];\n});\n\n_c = NodeSystem;\nexport default NodeSystem;\n\nvar _c;\n\n$RefreshReg$(_c, \"NodeSystem\");","map":{"version":3,"sources":["/Users/heidifjeldelima/Documents/GitHub/save_game/lightweight_blockchain-main/blockchain_webinterface/annall_ui/src/components/NodeSystem/index.js"],"names":["React","useState","useEffect","useDispatch","Link","useNavigate","NodeSystem","dispatch","navigate","title","settitle","description","setdescription","imageURL","setimageURL","answer1","setAnswer1","answer2","setAnswer2","answer3","setAnswer3","answer4","setAnswer4","answer1Correct","setAnswer1Correct","answer2Correct","setAnswer2Correct","answer3Correct","setAnswer3Correct","answer4Correct","setAnswer4Correct","errors","setErrors","correctAnswer","setCorrectAnswer","userIsAuth","setUserIsAuth","userInfo","setUserInfo","altImage","getDict","previous_hash","writer_signature","writer_id","coordinator_id","winner_number","payload","id","name","type","data","handleChange","e","target","value","validate","isValid","le","length","form","JSON","parse","localStorage","getItem","handleOnSubmit"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link, useNavigate } from \"react-router-dom\";\n\nconst NodeSystem = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate;\n  const [title, settitle] = useState(\"\");\n  const [description, setdescription] = useState(\"\");\n  const [imageURL, setimageURL] = useState(\"\");\n  const [answer1, setAnswer1] = useState(\"\");\n  const [answer2, setAnswer2] = useState(\"\");\n  const [answer3, setAnswer3] = useState(\"\");\n  const [answer4, setAnswer4] = useState(\"\");\n  const [answer1Correct, setAnswer1Correct] = useState(false);\n  const [answer2Correct, setAnswer2Correct] = useState(false);\n  const [answer3Correct, setAnswer3Correct] = useState(false);\n  const [answer4Correct, setAnswer4Correct] = useState(false);\n  const [errors, setErrors] = useState({\n    title: \"\",\n    description: \"\",\n    imageURL: \"\",\n  });\n  const [correctAnswer, setCorrectAnswer] = useState(\"answer_1\");\n  const [userIsAuth, setUserIsAuth] = useState(false);\n  const [userInfo, setUserInfo] = useState(\"\");\n  const altImage = \"https://static.thenounproject.com/png/396915-200.png\";\n  const getDict = () => {\n    return {\n      previous_hash: \"4d3e9b1e-816f-473b-8bd2-dd642681f07d\",\n      writer_signature: \"0a442720-2707-4e3e-b5cc-9c65b806bd1c\",\n      writer_id: \"0a442720-2707-4e3e-b5cc-9c65b806bd1c\",\n      coordinator_id: 3,\n      winner_number: 2,\n      payload: {\n        id: 43,\n        name: title,\n        description: description,\n        type: \"NFT\",\n        data: {\n          imageURL: imageURL,\n        },\n      },\n    };\n  };\n  const handleChange = (e) => {\n    setCorrectAnswer(e.target.value);\n  };\n  const validate = () => {\n    let isValid = true;\n    const le = { title: \"\", description: \"\", imageURL: \"\" };\n    if (title.length <= 0) {\n      le[\"title\"] = \" can't be empty\";\n      isValid = false;\n    }\n\n    if (description.length < 6) {\n      le[\"description\"] = \" should be at least 6 in length\";\n      isValid = false;\n    }\n    if (imageURL.length < 5) {\n      le[\"imageURL\"] = \" should be at least 5 in length\";\n      isValid = false;\n    }\n\n    setErrors(le);\n    return isValid;\n  };\n\n  useEffect(() => {\n    const form = JSON.parse(localStorage.getItem(\"form\"));\n  }, []);\n\n  const handleOnSubmit = async (e) => {\n    // Send to server\n    // e.preventDefault();\n    // console.log(\"Value \", correctAnswer);\n    // // If error then we don't dispatch\n    // //   if (!validate(title, question, url)) return;\n    // let correct1 = false;\n    // let correct2 = false;\n    // let correct3 = false;\n    // let correct4 = false;\n    // if (correctAnswer == \"answer_1\") {\n    //   correct1 = true;\n    // } else if (correctAnswer == \"answer_2\") {\n    //   correct2 = true;\n    // } else if (correctAnswer == \"answer_3\") {\n    //   correct3 = true;\n    // } else {\n    //   correct4 = true;\n    // }\n    // const user = JSON.parse(localStorage.getItem(\"user\"));\n    // console.log(\"The user \", user, \"id \", user.id);\n    // console.log(\"The user right here on submit \", user);\n    // let theQuestions = [\n    //   {\n    //     title: \"The biggest earwax in the world is?\",\n    //     options: [\n    //       {\n    //         value: \"your aunt's pants\",\n    //         correct: true,\n    //       },\n    //       {\n    //         value: \"Your grandma\",\n    //         correct: false,\n    //       },\n    //     ],\n    //   },\n    // ];\n    // let requestOptions = {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   credentials: \"include\",\n    //   body: JSON.stringify({\n    //     title: title,\n    //     titleImage: url,\n    //     questions: theQuestions,\n    //     owner: user,\n    //   }),\n    // };\n    // let res = await fetch(\"http://localhost:4567/matches\", requestOptions);\n    // console.log(\"Res \", res);\n    // let getRequest = {\n    //   method: \"GET\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    // };\n    // let userRes = await fetch(\"http://localhost:4567/user/info\", getRequest);\n    // console.log(\"user res \", userRes);\n  };\n\n  return (\n    <div>\n      <h1>Create NFT!</h1>\n      {/* <form action=\"\" method=\"get\" onSubmit={(e) => handleOnSubmit(e)}>\n        <label>\n          Title of NFT\n          {errors.title}\n          <input\n            type=\"text\"\n            value={title}\n            title=\"title\"\n            onChange={(e) => settitle(e.target.value)}\n          />\n        </label>\n\n        <label>\n          IPSF imageURL\n          {errors.imageURL}\n          <input\n            type=\"text\"\n            value={imageURL}\n            title=\"imageURL\"\n            onChange={(e) => setimageURL(e.target.value)}\n          />\n        </label>\n        <label>\n          Description\n          {errors.description}\n          <input\n            type=\"text\"\n            value={description}\n            title=\"description\"\n            onChange={(e) => setdescription(e.target.value)}\n          />\n        </label>\n\n        <button type=\"submit\">Create</button>\n      </form> */}\n    </div>\n  );\n};\nexport default NodeSystem;\n"]},"metadata":{},"sourceType":"module"}